%%-----------------------------------------------------------------
%% This script is executed at server side. The programming language
%% is Erlang.
%% The module must export method "on_event/1" or "on_event/2" . 
%% The on_event/2 should be used if your code needs to keep some state between
%% calls.
%%
%% The callback "on_event" is called by the faceplate only in run-time. 
%% As the trigger might be used timer and/or change of the value of some field 
%% of the tag.
%% If the event is triggered by the timer then the first argument of the on_event 
%% callback will be:
%%    {on_cycle,Cycle} - Cycle is period (ms).
%% If the event is triggered by the change of the value of the linked tag field 
%% then the first argument of the on_event will be:
%%    {tag,TagID,Field,Value} - TagID - OID of the tag
%%                              Field - name of the field
%%                              Value - current value of the field. 
%% The returned value is considered being state and passed as the second argument
%% at the next call.
%%-----------------------------------------------------------------

-module(every_hour).

-include("fp_struct.hrl").

-export([on_event/2]).

on_event({on_cycle,Cycle},State)->
   % here should be your code that is executed each Cycle milliseconds
   State;
on_event({tag,TagID,Field,Value},State)->
   % here should be your code that is executed on change of the Field of the Tag
   State.


fun(VARS,_State)->
    % This is an example code, replace it with your code

    Time2Tag = #{
        0 => <<"/root/PROJECT/TAGS/a1">>,
        1 => <<"/root/PROJECT/TAGS/a2">>,
        37 => 
    },
    
    {_H, Minute, _S} = time(),
    
    TagPath = maps:get(Minute, Time2Tag, none),
    case TagPath of
        none -> 
            ok;
        _ -> 
            {ok, Tag} = fp:open_tag(TagPath),
            Value = fp_db:read_field(Tag, <<"value">>),
            fp_db:edit_object(Tag,  #{<<"value">> => Value + 1})
    end,
    
    { #{}, none }
end